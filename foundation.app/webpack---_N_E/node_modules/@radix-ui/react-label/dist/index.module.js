import {
    useId as e
} from "@radix-ui/react-id";
import {
    Primitive as t
} from "@radix-ui/react-primitive";
import {
    useComposedRefs as r
} from "@radix-ui/react-compose-refs";
import * as o from "react";
import n from "@babel/runtime/helpers/esm/extends";
const i = "span",
    a = /*#__PURE__*/ o.createContext(void 0);
export const Label = /*#__PURE__*/ o.forwardRef(((l, c) => {
    const {
        as: u = i,
        htmlFor: d,
        id: f,
        ...m
    } = l, b = o.useRef(null), v = r(c, b), p = e(f);
    return o.useEffect((() => {
        const e = b.current;
        if (e) {
            const t = e => {
                e.detail > 1 && e.preventDefault()
            };
            return e.addEventListener("mousedown", t), () => e.removeEventListener("mousedown", t)
        }
    }), [b]), o.useEffect((() => {
        if (d) {
            const e = document.getElementById(d),
                t = b.current;
            if (t && e) {
                const r = s(t, e),
                    o = () => e.getAttribute("aria-labelledby"),
                    n = [o(), p].filter(Boolean).join(" ");
                return e.setAttribute("aria-labelledby", n), () => {
                    var t;
                    r();
                    const n = null === (t = o()) || void 0 === t ? void 0 : t.replace(p, "");
                    "" === n ? e.removeAttribute("aria-labelledby") : n && e.setAttribute("aria-labelledby", n)
                }
            }
        }
    }), [p, d]), /*#__PURE__*/ o.createElement(a.Provider, {
        value: o.useMemo((() => ({
            id: p,
            ref: b
        })), [p])
    }, /*#__PURE__*/ o.createElement(t, n({
        role: "label",
        id: p
    }, m, {
        as: u,
        ref: v
    })))
})); /*#__PURE__*/
export const useLabelContext = e => {
    const t = o.useContext(a);
    return o.useEffect((() => {
        const r = null == t ? void 0 : t.ref.current;
        if (r && e) return s(r, e)
    }), [t, e]), null == t ? void 0 : t.id
};

function s(e, t) {
    const r = e => {
        const r = t.contains(e.target),
            o = !0 === e.isTrusted;
        !r && o && (t.click(), t.focus())
    };
    return e.addEventListener("click", r), () => e.removeEventListener("click", r)
}
export const Root = Label;
//# sourceMappingURL=index.module.js.map