import {
    Primitive as e
} from "@radix-ui/react-primitive";
import {
    Presence as t
} from "@radix-ui/react-presence";
import {
    useLabelContext as r
} from "@radix-ui/react-label";
import {
    useSize as o
} from "@radix-ui/react-use-size";
import {
    usePrevious as a
} from "@radix-ui/react-use-previous";
import {
    useControllableState as n
} from "@radix-ui/react-use-controllable-state";
import {
    composeEventHandlers as i
} from "@radix-ui/primitive";
import {
    createContext as c
} from "@radix-ui/react-context";
import {
    useComposedRefs as s
} from "@radix-ui/react-compose-refs";
import * as d from "react";
import l from "@babel/runtime/helpers/esm/extends";
const u = "button",
    [p, m] = c("Checkbox");
export const Checkbox = /*#__PURE__*/ d.forwardRef(((t, o) => {
    const {
        as: a = u,
        "aria-labelledby": c,
        name: m,
        checked: b,
        defaultChecked: k,
        required: C,
        disabled: v,
        value: y = "on",
        onCheckedChange: E,
        ...g
    } = t, [w, I] = d.useState(null), R = s(o, (e => I(e))), P = r(w), q = c || P, M = d.useRef(!1), O = !w || Boolean(w.closest("form")), [S = !1, j] = n({
        prop: b,
        defaultProp: k,
        onChange: E
    }); /*#__PURE__*/
    return d.createElement(p, {
        state: S,
        disabled: v
    }, /*#__PURE__*/ d.createElement(e, l({
        type: "button",
        role: "checkbox",
        "aria-checked": x(S) ? "mixed" : S,
        "aria-labelledby": q,
        "aria-required": C,
        "data-state": h(S),
        "data-disabled": v ? "" : void 0,
        disabled: v,
        value: y
    }, g, {
        as: a,
        ref: R,
        onClick: i(t.onClick, (e => {
            j((e => !!x(e) || !e)), O && (M.current = e.isPropagationStopped(), M.current || e.stopPropagation())
        }))
    })), O && /*#__PURE__*/ d.createElement(f, {
        control: w,
        bubbles: !M.current,
        name: m,
        value: y,
        checked: S,
        required: C,
        disabled: v,
        style: {
            transform: "translateX(-100%)"
        }
    }))
})); /*#__PURE__*/
const b = "span";
export const CheckboxIndicator = /*#__PURE__*/ d.forwardRef(((r, o) => {
    const {
        as: a = b,
        forceMount: n,
        ...i
    } = r, c = m("CheckboxIndicator"); /*#__PURE__*/
    return d.createElement(t, {
        present: n || x(c.state) || !0 === c.state
    }, /*#__PURE__*/ d.createElement(e, l({
        "data-state": h(c.state),
        "data-disabled": c.disabled ? "" : void 0
    }, i, {
        as: a,
        ref: o,
        style: {
            pointerEvents: "none",
            ...r.style
        }
    })))
})); /*#__PURE__*/
const f = e => {
    const {
        control: t,
        checked: r,
        bubbles: n = !0,
        ...i
    } = e, c = d.useRef(null), s = a(r), u = o(t);
    return d.useEffect((() => {
        const e = c.current,
            t = window.HTMLInputElement.prototype,
            o = Object.getOwnPropertyDescriptor(t, "checked").set;
        if (s !== r && o) {
            const t = new Event("click", {
                bubbles: n
            });
            e.indeterminate = x(r), o.call(e, !x(r) && r), e.dispatchEvent(t)
        }
    }), [s, r, n]), /*#__PURE__*/ d.createElement("input", l({
        type: "checkbox",
        defaultChecked: !x(r) && r
    }, i, {
        tabIndex: -1,
        ref: c,
        style: { ...e.style,
            ...u,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
        }
    }))
};

function x(e) {
    return "indeterminate" === e
}

function h(e) {
    return x(e) ? "indeterminate" : e ? "checked" : "unchecked"
}
export const Root = Checkbox;
export const Indicator = CheckboxIndicator;
//# sourceMappingURL=index.module.js.map