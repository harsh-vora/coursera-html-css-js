export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  BigInt: string;
  BigDecimal: string;
  Bytes: string;
};

export type Account = {
  __typename?: 'Account';
  /** The account's address */
  id?: Scalars['ID'];
  /** True if the account is a Foundation admin */
  isAdmin?: Scalars['Boolean'];
  /** Link to creator details if this account is or ever was one */
  creator?: Maybe<Creator>;
  /** All NFTs currently owned by this account */
  nfts?: Array<Nft>;
  /** All NFTs currently owner or listed by this account */
  nftsOwnedOrListed?: Array<Nft>;
  /** All auctions created by this account */
  nftMarketAuctions?: Array<NftMarketAuction>;
  /** All bids placed by this account */
  nftBidsPlaced?: Array<NftMarketBid>;
  /** All bids accepted by this account */
  nftBidsAccepted?: Array<NftMarketBid>;
  /** NFT transfers from this account to another */
  nftTransfersOut?: Array<NftTransfer>;
  /** NFT transfers to this account from another */
  nftTransfersIn?: Array<NftTransfer>;
  /** The total ETH earned by this account, excluding any NFTs minted by this creator */
  netRevenueInETH?: Scalars['BigDecimal'];
  /** The total ETH earned by this account but still pending finalization, excluding any NFTs minted by this creator */
  netRevenuePendingInETH?: Scalars['BigDecimal'];
  /** Approvals granted by this account, note this does not include nft.approvedSpender */
  nftAccountApprovals?: Array<NftAccountApproval>;
  /** NFT actions initiated by this account */
  nftHistory?: Array<NftHistory>;
  /** Funds held in escrow for later withdrawal */
  pendingWithdraws?: Array<PendingWithdraw>;
  /** Funds withdrawn by this account */
  withdrawals?: Array<Withdrawal>;
  /** The total amount available to this account to withdraw */
  pendingWithdrawalAmountInETH?: Scalars['BigDecimal'];
};




export type Creator = {
  __typename?: 'Creator';
  /** The account's address */
  id?: Scalars['ID'];
  /** The creator's account information */
  account?: Account;
  /** All NFTs minted by this creator */
  nfts?: Array<Nft>;
  /** The total ETH for sales of NFTs this creator minted */
  netSalesInETH?: Scalars['BigDecimal'];
  /** The total ETH for sales of NFTs this creator minted but still pending finalization */
  netSalesPendingInETH?: Scalars['BigDecimal'];
  /** The total ETH earned by this creator */
  netRevenueInETH?: Scalars['BigDecimal'];
  /** The total ETH earned by this creator but still pending finalization */
  netRevenuePendingInETH?: Scalars['BigDecimal'];
};

export enum HistoricalEvent {
  /** The original mint event for this NFT */
  Minted = 'Minted',
  /** The NFT has been listed for sale */
  Listed = 'Listed',
  /** The NFT was unlisted from the market */
  Unlisted = 'Unlisted',
  /** The price for this listing has been modified */
  PriceChanged = 'PriceChanged',
  /** A bid for the NFT has been made */
  Bid = 'Bid',
  /** The NFT has been sold */
  Sold = 'Sold',
  /** The sale has been settled on-chain and the NFT was transferred to the new owner */
  Settled = 'Settled',
  /** The NFT was transferred from one address to another */
  Transferred = 'Transferred',
  /** The NFT was burned and now no longer available on-chain */
  Burned = 'Burned',
  /** The creator has been migrated to a new account */
  CreatorMigrated = 'CreatorMigrated',
  /** The current owner of this NFT has migrated to a new account */
  OwnerMigrated = 'OwnerMigrated',
  /** The seller for the current auction has migrated to a new account */
  SellerMigrated = 'SellerMigrated',
  /** The payment address for this NFT has migrated to a new address */
  CreatorPaymentAddressMigrated = 'CreatorPaymentAddressMigrated'
}

export enum Marketplace {
  /** Foundation's market contract is the only one supported ATM but more will be added in the future */
  Foundation = 'Foundation'
}

export type Nft = {
  __typename?: 'Nft';
  /** tokenContractAddress-tokenId */
  id?: Scalars['ID'];
  /** The token's contract */
  nftContract?: NftContract;
  /** The tokenId for this specific NFT */
  tokenId?: Scalars['BigInt'];
  /** The content path for the metadata of this NFT on IPFS */
  tokenIPFSPath?: Maybe<Scalars['String']>;
  /** The name of this NFT */
  name?: Maybe<Scalars['String']>;
  /** A description of this NFT */
  description?: Maybe<Scalars['String']>;
  /** The NFT's image URI */
  image?: Maybe<Scalars['String']>;
  /** The creator of this NFT */
  creator?: Maybe<Creator>;
  /** The date/time when this NFT was minted in seconds since Unix epoch */
  dateMinted?: Scalars['BigInt'];
  /** The transfer details where this NFT was minted */
  mintedTransfer?: Maybe<NftTransfer>;
  /** The current owner of this NFT */
  owner?: Account;
  /** The current owner or the owner who listed the NFT */
  ownedOrListedBy?: Account;
  /** An account authorized to transfer this NFT, if one was approved */
  approvedSpender?: Maybe<Account>;
  /** All transfers that have occurred for this NFT */
  transfers?: Maybe<Array<NftTransfer>>;
  /** All bids ever placed for this NFT */
  bids?: Array<NftMarketBid>;
  /** The total ETH for sales of this NFT */
  netSalesInETH?: Scalars['BigDecimal'];
  /** The total ETH for sales of this NFT but still pending finalization */
  netSalesPendingInETH?: Scalars['BigDecimal'];
  /** The total ETH earned by the creator from this NFT */
  netRevenueInETH?: Scalars['BigDecimal'];
  /** The total ETH earned by this creator from this NFT but still pending finalization */
  netRevenuePendingInETH?: Scalars['BigDecimal'];
  /** True if the NFT has not yet been sold in the Foundation market */
  isFirstSale?: Scalars['Boolean'];
  /** All auctions which were created for this NFT */
  auctions?: Array<NftMarketAuction>;
  /** The current or last previous auction for this NFT */
  mostRecentAuction?: Maybe<NftMarketAuction>;
  /** The current or last auction for this NFT which has not been canceled, if any */
  mostRecentActiveAuction?: Maybe<NftMarketAuction>;
  /** The last auction for this NFT which was finalized, if there was one */
  latestFinalizedAuction?: Maybe<NftMarketAuction>;
  /** The event history for this NFT */
  nftHistory?: Array<NftHistory>;
  /** An optional address to receive revenue and creator royalty payments generated by this NFT */
  tokenCreatorPaymentAddress?: Maybe<Scalars['Bytes']>;
  /** A reference to the split details defined by the tokenCreatorPaymentAddress, if that address is a PercentSplit */
  percentSplit?: Maybe<PercentSplit>;
};

export type NftAccountApproval = {
  __typename?: 'NftAccountApproval';
  /** tokenAddress-owner-spender */
  id?: Scalars['ID'];
  /** The token's contract */
  nftContract?: NftContract;
  /** The account which granted this approval */
  owner?: Account;
  /** The account which is authorized to transfer NFTs held by the owner */
  spender?: Account;
};

export type NftContract = {
  __typename?: 'NftContract';
  /** The contract's address */
  id?: Scalars['ID'];
  /** The token name */
  name?: Maybe<Scalars['String']>;
  /** The token symbol */
  symbol?: Maybe<Scalars['String']>;
  /** Append baseURI+tokenIPFSPath to get the tokenURI */
  baseURI?: Maybe<Scalars['String']>;
  /** All NFTs minted by this contract */
  nfts?: Array<Nft>;
  /** IPFS content pending download */
  pendingIPFSList?: Array<PendingIpfs>;
};

export type NftHistory = {
  __typename?: 'NftHistory';
  /** tx-logId-eventType */
  id?: Scalars['ID'];
  /** The NFT being sold in this auction */
  nft?: Nft;
  /** The type of action that this row represents */
  event?: HistoricalEvent;
  /** The related auction for this change, if applicable */
  auction?: Maybe<NftMarketAuction>;
  /** The contract which processed this event, may be a marketplace or the NFT itself */
  contractAddress?: Scalars['Bytes'];
  /** The date/time of this event in seconds since Unix epoch */
  date?: Scalars['BigInt'];
  /** Which market which facilitated this transaction, null when the action was specific to the NFT itself */
  marketplace?: Maybe<Marketplace>;
  /** The transaction hash where this event occurred */
  transactionHash?: Scalars['Bytes'];
  /** The account associated with this event, if unknown the txOrigin is used. Usually the same as txOrigin but may differ when multisig or other contracts are used */
  actorAccount?: Account;
  /** The msg.sender for the transaction associated with this event */
  txOrigin?: Account;
  /** The destination of the NFT for events where the NFT was transferred, null if n/a */
  nftRecipient?: Maybe<Account>;
  /** The value amount associated with this event, in ETH. Null if unknown or n/a */
  amountInETH?: Maybe<Scalars['BigDecimal']>;
  /** The ERC-20 value associated with this event. Null if unknown or ETH was used */
  amountInTokens?: Maybe<Scalars['BigInt']>;
  /** The ERC-20 token address associated with this event. Null if unknown or ETH was used */
  tokenAddress?: Maybe<Scalars['Bytes']>;
};

export type NftMarketAuction = {
  __typename?: 'NftMarketAuction';
  /** marketContractAddress-auctionId */
  id?: Scalars['ID'];
  /** The contract managing this auction */
  nftMarketContract?: NftMarketContract;
  /** The id for this auction */
  auctionId?: Scalars['BigInt'];
  /** The NFT being sold in this auction */
  nft?: Nft;
  /** The NFT contract for this NFT */
  nftContract?: NftContract;
  /** The current status of this auction */
  status?: NftMarketAuctionStatus;
  /** The NFT owner currently offering the NFT for sale */
  seller?: Account;
  /** The date/time the auction was initially created in seconds since Unix epoch */
  dateCreated?: Scalars['BigInt'];
  /** The tx hash where this auction was initially created */
  transactionHashCreated?: Scalars['Bytes'];
  /** The date/time the auction countdown began, only known once reserve price has been met in seconds since Unix epoch */
  dateStarted?: Maybe<Scalars['BigInt']>;
  /** The date/time the auction will be closed, only known once the reserve price has been met in seconds since Unix epoch */
  dateEnding?: Maybe<Scalars['BigInt']>;
  /** The date/time the auction was canceled in seconds since Unix epoch, if applicable */
  dateCanceled?: Maybe<Scalars['BigInt']>;
  /** The reason this auction was canceled, if known */
  canceledReason?: Maybe<Scalars['String']>;
  /** The date/time the auction was finalized in seconds since Unix epoch, if applicable */
  dateFinalized?: Maybe<Scalars['BigInt']>;
  /** The tx hash where this auction was canceled, if applicable */
  transactionHashCanceled?: Maybe<Scalars['Bytes']>;
  /** The initial reserve price which needs to be met in order to begin the auction countdown */
  reservePriceInETH?: Scalars['BigDecimal'];
  /** The first bid which met the reserve price */
  initialBid?: Maybe<NftMarketBid>;
  /** The current highest bid, if one has been placed */
  highestBid?: Maybe<NftMarketBid>;
  /** All bids placed in this auction */
  bids?: Array<NftMarketBid>;
  /** How much the creator earned from this auction, set once there a bid is placed */
  creatorRevenueInETH?: Maybe<Scalars['BigDecimal']>;
  /** How much Foundation earned from this auction, set once there a bid is placed */
  foundationRevenueInETH?: Maybe<Scalars['BigDecimal']>;
  /** How much the owner (if not the creator) earned from this auction, set once there a bid is placed */
  ownerRevenueInETH?: Maybe<Scalars['BigDecimal']>;
  /** How long the auction runs for once the reserve price has been met in seconds */
  duration?: Scalars['BigInt'];
  /** How long to extend the dateEnding if a bid is placed near the end of the countdown in seconds */
  extensionDuration?: Scalars['BigInt'];
  /** True if this is the first sale on Foundation and being sold by the creator */
  isPrimarySale?: Scalars['Boolean'];
  /** How many bids have been placed for any auction on Foundation */
  numberOfBids?: Scalars['BigInt'];
  /** The volume of ETH bid */
  bidVolumeInETH?: Scalars['BigDecimal'];
};

export enum NftMarketAuctionStatus {
  /** This auction has not been canceled or finalized yet, it may be active or pending finalization */
  Open = 'Open',
  /** This auction was canceled before the reserve price was hit */
  Canceled = 'Canceled',
  /** This auction was finalized and the NFT has been transferred to the winner */
  Finalized = 'Finalized'
}

export type NftMarketBid = {
  __typename?: 'NftMarketBid';
  /** marketContractAddress-auctionId-txHash-logId */
  id?: Scalars['ID'];
  /** The auction this bid was for */
  nftMarketAuction?: NftMarketAuction;
  /** The NFT being sold in this auction */
  nft?: Nft;
  /** The account which placed the bid */
  bidder?: Account;
  /** The date/time the bid was placed in seconds since Unix epoch */
  datePlaced?: Scalars['BigInt'];
  /** The tx hash that placed the bid */
  transactionHashPlaced?: Scalars['Bytes'];
  /** The size of the bid placed, including fees */
  amountInETH?: Scalars['BigDecimal'];
  /** The current status of this bid */
  status?: NftMarketBidStatus;
  /** The date/item when this bid became no longer Active in seconds since Unix epoch, if applicable */
  dateLeftActiveStatus?: Maybe<Scalars['BigInt']>;
  /** The tx hash that moved this bid out of Active status, if applicable */
  transactionHashLeftActiveStatus?: Maybe<Scalars['Bytes']>;
  /** The account which offered this NFT for sale */
  seller?: Account;
  /** True if this bid caused the end time of an auction to be extended */
  extendedAuction?: Scalars['Boolean'];
  /** The bid which outbid this one, if applicable */
  outbidByBid?: Maybe<NftMarketBid>;
  /** The bid this one outbid, if applicable */
  bidThisOutbid?: Maybe<NftMarketBid>;
};

export enum NftMarketBidStatus {
  /** This bid is currently the highest, either on-track to win or has won and is pending finalization */
  Highest = 'Highest',
  /** This bid was outbid by another user */
  Outbid = 'Outbid',
  /** This bid won the auction and was finalized, completing the NFT transfer */
  FinalizedWinner = 'FinalizedWinner'
}

export type NftMarketContract = {
  __typename?: 'NftMarketContract';
  /** The contract's address */
  id?: Scalars['ID'];
  /** How much larger a bid needs to be to outbid another user */
  minBidIncrementInPercent?: Maybe<Scalars['BigDecimal']>;
  /** The max bid increment required to outbid another user */
  maxBidIncrementRequirementInETH?: Maybe<Scalars['BigDecimal']>;
  /** The fee to Foundation for the first sale */
  percentPrimaryFoundationFee?: Maybe<Scalars['BigDecimal']>;
  /** The fee to Foundation for subsequent sales */
  percentSecondaryFoundationFee?: Maybe<Scalars['BigDecimal']>;
  /** The fee to the creator for subsequent sales */
  percentSecondaryCreatorFee?: Maybe<Scalars['BigDecimal']>;
  /** How long the auction runs for once the reserve price has been met in seconds */
  duration?: Maybe<Scalars['BigInt']>;
  /** How long to extend the dateEnding if a bid is placed near the end of the countdown in seconds */
  extensionDuration?: Maybe<Scalars['BigInt']>;
  /** When the auction is first available, in seconds since Unix epoch */
  dateGoLiveDate?: Maybe<Scalars['BigInt']>;
  /** How many bids have been placed for any auction on Foundation */
  numberOfBidsPlaced?: Scalars['BigInt'];
};

export type NftTransfer = {
  __typename?: 'NftTransfer';
  /** tx-logId */
  id?: Scalars['ID'];
  /** The NFT which was transferred */
  nft?: Nft;
  /** The source of the transfer, 0 when the token was minted */
  from?: Account;
  /** The destination of the transfer, 0 when the token is burned */
  to?: Account;
  /** The date/time of the transfer in seconds since Unix epoch */
  dateTransferred?: Scalars['BigInt'];
  /** The tx hash where the transfer occurred */
  transactionHash?: Scalars['Bytes'];
};

export type PendingIpfs = {
  __typename?: 'PendingIPFS';
  /** tokenContractAddress-tokenId */
  id?: Scalars['ID'];
  /** How many times we have attempted to download content for this NFT */
  retryCount?: Scalars['BigInt'];
  /** The minimum timestamp for the next retry, in seconds since Unix epoch */
  dateNextRetry?: Scalars['BigInt'];
};

export type PendingWithdraw = {
  __typename?: 'PendingWithdraw';
  /** tx-logId */
  id?: Scalars['ID'];
  /** The user with a pending withdrawal */
  account?: Account;
  /** The amount held in escrow for withdrawal from this event */
  amountInETH?: Scalars['BigDecimal'];
  /** The date/time of this event in seconds since Unix epoch */
  date?: Scalars['BigInt'];
  /** The transaction hash where this event occurred */
  transactionHash?: Scalars['Bytes'];
};

export type PercentSplit = {
  __typename?: 'PercentSplit';
  /** The address of this split contract */
  id?: Scalars['ID'];
  /** The recipients and their percent share for this split */
  shares?: Array<PercentSplitShare>;
  /** All the NFTs currently leveraging this split */
  nfts?: Array<Nft>;
  /** How many different shares are in this split */
  shareCount?: Scalars['BigInt'];
  /** The date/time this split was initially created in seconds since Unix epoch */
  dateCreated?: Scalars['BigInt'];
};

export type PercentSplitShare = {
  __typename?: 'PercentSplitShare';
  /** contractAddress-logId */
  id?: Scalars['ID'];
  /** The split this share is for */
  split?: PercentSplit;
  /** The recipient included in the split */
  account?: Account;
  /** The percent share this recipient will receive */
  shareInPercent?: Scalars['BigDecimal'];
  /** The index position of this share in the split, as defined in the contract */
  indexOfShare?: Scalars['BigInt'];
};

export type Withdrawal = {
  __typename?: 'Withdrawal';
  /** tx-logId */
  id?: Scalars['ID'];
  /** The user which withdrew funds */
  account?: Account;
  /** The amount withdrawn in this event */
  amountInETH?: Scalars['BigDecimal'];
  /** The date/time of this event in seconds since Unix epoch */
  date?: Scalars['BigInt'];
  /** The transaction hash where this event occurred */
  transactionHash?: Scalars['Bytes'];
};
